#!/usr/bin/env python
# coding=utf-8
"""
Usage: wiva <url> [ <revision> ]
            [ --all-articles ] [ --from=<from> ]
            [ --text-only ]
            [ --wikitext=<wikitext_file> ]
            [ --verbose ] [ --debug ]
"""
import logging
import urllib
import docopt
import requests
import requests.adapters
import time
from mediawiki import Article, Wiki
from validation import Validation
from wikitext_checkers import ALL_CHECKERS

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.CRITICAL)


def str2hex(s):
    return " ".join("0x{:02x}".format(ord(c)) for c in s)


def cli(arguments):
    requests.adapters.DEFAULT_RETRIES = 2

    if arguments['--debug']:
        logging.root.setLevel(logging.DEBUG)

    if arguments['--all-articles']:
        processed_count = 0
        wiki = Wiki(arguments['<url>'])
        for article in wiki.iterarticles(start=arguments['--from']):
            process_article(article, processed_count)
            processed_count += 1
    else:
        process_article(Article(arguments['<url>']))


def process_article(article, processed_count=None):
    if processed_count is not None:
        page_url = article.url.page
        text_msg = '[{:5d}] {} ...'.format(processed_count + 1, urllib.unquote(page_url))
        logger.info(text_msg)
        print text_msg

    if arguments['--wikitext']:
        with open(arguments['--wikitext'], 'r') as f:
            article._wikitext = f.read()

    retries_left = 4
    wikitext = None
    while True:
        try:
            wikitext = article.wikitext
        except requests.ConnectionError:
            retries_left -= 1
            if retries_left <= 0:
                raise
            logger.debug('Request failed, sleeping for 3 seconds...')
            time.sleep(3)
        else:
            break

    logger.info('  * wikitext length = {}'.format(len(wikitext)))

    validation = Validation(article, ALL_CHECKERS)
    for message in validation.messages:
        print message
    return


if __name__ == '__main__':
    arguments = docopt.docopt(__doc__)
    cli(arguments)

__author__ = 'alistra'
